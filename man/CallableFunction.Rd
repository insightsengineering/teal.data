% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CallableFunction.R
\name{CallableFunction}
\alias{CallableFunction}
\title{A \code{CallableFunction} class of objects}
\description{
Object that stores a function name together with its arguments.
Methods are then available to get the function call and evaluate it.
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.data:Callable]{teal.data::Callable}} -> \code{CallableFunction}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CallableFunction-new}{\code{CallableFunction$new()}}
\item \href{#method-CallableFunction-get_args}{\code{CallableFunction$get_args()}}
\item \href{#method-CallableFunction-get_call}{\code{CallableFunction$get_call()}}
\item \href{#method-CallableFunction-set_args}{\code{CallableFunction$set_args()}}
\item \href{#method-CallableFunction-set_arg_value}{\code{CallableFunction$set_arg_value()}}
\item \href{#method-CallableFunction-clone}{\code{CallableFunction$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="Callable" data-id="assign_to_env"><a href='../../teal.data/html/Callable.html#method-Callable-assign_to_env'><code>teal.data::Callable$assign_to_env()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="Callable" data-id="get_error_message"><a href='../../teal.data/html/Callable.html#method-Callable-get_error_message'><code>teal.data::Callable$get_error_message()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="Callable" data-id="is_failed"><a href='../../teal.data/html/Callable.html#method-Callable-is_failed'><code>teal.data::Callable$is_failed()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="Callable" data-id="run"><a href='../../teal.data/html/Callable.html#method-Callable-run'><code>teal.data::Callable$run()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableFunction-new"></a>}}
\if{latex}{\out{\hypertarget{method-CallableFunction-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{CallableFunction} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$new(fun, env = new.env(parent = parent.env(globalenv())))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{(\code{function})\cr
function to be evaluated in class.
This is either a \code{function} object or its name as a string.}

\item{\code{env}}{(\code{environment})\cr
environment where function will be evaluated}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{CallableFunction} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableFunction-get_args"></a>}}
\if{latex}{\out{\hypertarget{method-CallableFunction-get_args}{}}}
\subsection{Method \code{get_args()}}{
get the arguments a function gets called with
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$get_args()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
arguments the function gets called with
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableFunction-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-CallableFunction-get_call}{}}}
\subsection{Method \code{get_call()}}{
Get function call with substituted arguments in \code{args}.
These arguments will not be stored in the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$get_call(deparse = TRUE, args = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deparse}}{(\code{logical} value)\cr
whether to return a deparsed version of call}

\item{\code{args}}{(\code{NULL} or named \code{list})\cr
dynamic arguments to function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{call} or \code{character} depending on \code{deparse} argument
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableFunction-set_args"></a>}}
\if{latex}{\out{\hypertarget{method-CallableFunction-set_args}{}}}
\subsection{Method \code{set_args()}}{
Set up function arguments
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$set_args(args)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list})\cr
function arguments to be stored persistently in the object. Setting \code{args} doesn't
remove other \code{args}, only create new of modify previous of the same name.
To clean arguments specify \code{args = NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableFunction-set_arg_value"></a>}}
\if{latex}{\out{\hypertarget{method-CallableFunction-set_arg_value}{}}}
\subsection{Method \code{set_arg_value()}}{
Set up single function argument with value
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$set_arg_value(name, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(\code{character}) argument name}

\item{\code{value}}{argument value}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableFunction-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CallableFunction-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableFunction$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
