% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TealData.R
\name{TealData}
\alias{TealData}
\title{Manage multiple \code{TealDataConnector}, \code{TealDatasetConnector} and \code{TealDataset} objects.}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Class manages \code{TealDataConnector}, \code{TealDatasetConnector} and
\code{TealDataset} objects and aggregate them in one collection.
Class also decides whether to launch app before initialize teal application.
}
\examples{
adsl_cf <- callable_function(teal.data::example_cdisc_data)$set_args(list(dataname = "ADSL"))
adlb_cf <- callable_function(teal.data::example_cdisc_data)$set_args(list(dataname = "ADLB"))
adrs_cf <- callable_function(teal.data::example_cdisc_data)$set_args(list(dataname = "ADRS"))
adtte_cf <- callable_function(teal.data::example_cdisc_data)$set_args(list(dataname = "ADTTE"))
x1 <- cdisc_dataset_connector("ADSL", adsl_cf, keys = get_cdisc_keys("ADSL"))
x2 <- cdisc_dataset_connector("ADRS", adrs_cf, keys = get_cdisc_keys("ADRS"))
x3 <- cdisc_dataset(
  dataname = "ADAE",
  x = teal.data::example_cdisc_data("ADAE"),
  code = "library(teal.data)\nADAE <- teal.data::example_cdisc_data(\"ADAE\")"
)
x4 <- cdisc_dataset_connector("ADTTE", adtte_cf, keys = get_cdisc_keys("ADTTE"))
tc <- teal.data:::TealData$new(x1, x2, x3, x4)
tc$get_datanames()
\dontrun{
tc$launch()
get_datasets(tc) # equivalent to tc$get_datasets()
tc$get_dataset("ADAE")
tc$check()
}

x <- cdisc_dataset(
  dataname = "ADSL",
  x = teal.data::example_cdisc_data("ADSL"),
  code = "library(teal.data)\nADSL <- teal.data::example_cdisc_data(\"ADSL\")"
)

x2 <- cdisc_dataset_connector("ADTTE", adtte_cf, keys = get_cdisc_keys("ADTTE"))
tc <- teal.data:::TealData$new(x, x2)
\dontrun{
# This errors as we have not pulled the data
# tc$get_datasets()
# pull the data and then we can get the datasets
tc$launch()
tc$get_datasets()
get_raw_data(tc)
}

}
\section{Super class}{
\code{\link[teal.data:TealDataAbstract]{teal.data::TealDataAbstract}} -> \code{TealData}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TealData-new}{\code{TealData$new()}}
\item \href{#method-TealData-copy}{\code{TealData$copy()}}
\item \href{#method-TealData-print}{\code{TealData$print()}}
\item \href{#method-TealData-get_connectors}{\code{TealData$get_connectors()}}
\item \href{#method-TealData-get_items}{\code{TealData$get_items()}}
\item \href{#method-TealData-get_join_keys}{\code{TealData$get_join_keys()}}
\item \href{#method-TealData-get_parents}{\code{TealData$get_parents()}}
\item \href{#method-TealData-get_ui}{\code{TealData$get_ui()}}
\item \href{#method-TealData-get_server}{\code{TealData$get_server()}}
\item \href{#method-TealData-launch}{\code{TealData$launch()}}
\item \href{#method-TealData-mutate_join_keys}{\code{TealData$mutate_join_keys()}}
\item \href{#method-TealData-check_metadata}{\code{TealData$check_metadata()}}
\item \href{#method-TealData-clone}{\code{TealData$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="check"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-check'><code>teal.data::TealDataAbstract$check()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="check_reproducibility"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-check_reproducibility'><code>teal.data::TealDataAbstract$check_reproducibility()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="execute_mutate"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-execute_mutate'><code>teal.data::TealDataAbstract$execute_mutate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="get_check"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-get_check'><code>teal.data::TealDataAbstract$get_check()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="get_check_result"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-get_check_result'><code>teal.data::TealDataAbstract$get_check_result()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="get_code"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-get_code'><code>teal.data::TealDataAbstract$get_code()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="get_code_class"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-get_code_class'><code>teal.data::TealDataAbstract$get_code_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="get_datanames"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-get_datanames'><code>teal.data::TealDataAbstract$get_datanames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="get_dataset"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-get_dataset'><code>teal.data::TealDataAbstract$get_dataset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="get_datasets"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-get_datasets'><code>teal.data::TealDataAbstract$get_datasets()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="is_pulled"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-is_pulled'><code>teal.data::TealDataAbstract$is_pulled()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="mutate"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-mutate'><code>teal.data::TealDataAbstract$mutate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="mutate_dataset"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-mutate_dataset'><code>teal.data::TealDataAbstract$mutate_dataset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="reassign_datasets_vars"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-reassign_datasets_vars'><code>teal.data::TealDataAbstract$reassign_datasets_vars()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="set_check"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-set_check'><code>teal.data::TealDataAbstract$set_check()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="TealDataAbstract" data-id="set_pull_code"><a href='../../teal.data/html/TealDataAbstract.html#method-TealDataAbstract-set_pull_code'><code>teal.data::TealDataAbstract$set_pull_code()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-new"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-new}{}}}
\subsection{Method \code{new()}}{
Create a new object of \code{TealData} class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$new(..., check = FALSE, join_keys = teal.data::join_keys())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(\code{TealDataConnector}, \code{TealDataset}, \code{TealDatasetConnector})\cr
objects}

\item{\code{check}}{(\code{logical}) reproducibility check - whether evaluated preprocessing code gives the same objects
as provided in arguments. Check is run only if flag is true and preprocessing code is not empty.}

\item{\code{join_keys}}{(\code{join_keys}) or a single (\code{join_key_set})\cr
(optional) object with dataset column relationships used for joining.
If empty then an empty \code{join_keys} object is passed by default.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-copy"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-copy}{}}}
\subsection{Method \code{copy()}}{
Creates a copy of the object with keeping valid references
between \code{TealDataset} and \code{TealDatasetConnector} objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$copy(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{(\code{logical(1)})\cr
argument passed to \code{clone} method. If \code{TRUE} deep copy is made}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self invisible
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-print"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-print}{}}}
\subsection{Method \code{print()}}{
Prints this \code{TealData}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{additional arguments to the printing method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-get_connectors"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-get_connectors}{}}}
\subsection{Method \code{get_connectors()}}{
Get data connectors.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$get_connectors()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{list}) with all \code{TealDatasetConnector} or \code{TealDataConnector} objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-get_items"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-get_items}{}}}
\subsection{Method \code{get_items()}}{
Get all datasets and all dataset connectors
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$get_items(dataname = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character} value)\cr
name of dataset connector to be returned. If \code{NULL}, all connectors are returned.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{list} with all datasets and all connectors
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-get_join_keys"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-get_join_keys}{}}}
\subsection{Method \code{get_join_keys()}}{
Get join keys between two datasets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$get_join_keys(dataset_1 = NULL, dataset_2 = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset_1}}{(\code{character}) name of first dataset.}

\item{\code{dataset_2}}{(\code{character}) name of second dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character}) named character vector x with names(x) the
columns of \code{dataset_1} and the values of \code{(x)} the corresponding join
keys in \code{dataset_2} or \code{character(0)} if no relationship
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-get_parents"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-get_parents}{}}}
\subsection{Method \code{get_parents()}}{
returns the parents list of the datasets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$get_parents()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
named (\code{list}) of the parents of all datasets.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-get_ui"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-get_ui}{}}}
\subsection{Method \code{get_ui()}}{
Get a shiny-module UI to render the necessary app to
derive \code{TealDataConnector} object's data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$get_ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character}) item ID for the shiny module}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{shiny} \code{ui} function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-get_server"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-get_server}{}}}
\subsection{Method \code{get_server()}}{
Get a shiny-module server to render the necessary app to
derive \code{TealDataConnector} object's data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$get_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{shiny} server module.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-launch"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-launch}{}}}
\subsection{Method \code{launch()}}{
Launch an app that allows to run the user-interfaces of all
\code{TealDataConnector} and \code{TealDatasetConnector} modules

This piece is mainly used for debugging.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$launch()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-mutate_join_keys"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-mutate_join_keys}{}}}
\subsection{Method \code{mutate_join_keys()}}{
Change join_keys for a given pair of dataset names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$mutate_join_keys(dataset_1, dataset_2, val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset_1, dataset_2}}{(\code{character}) datasets for which join_keys are to be returned}

\item{\code{val}}{(named \code{character}) column names used to join}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-check_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-check_metadata}{}}}
\subsection{Method \code{check_metadata()}}{
Check there is consistency between the datasets and join_keys
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$check_metadata()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raise and error or invisible \code{TRUE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealData-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TealData-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealData$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
