% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CodeClass.R
\name{CodeClass}
\alias{CodeClass}
\title{Code Class}
\description{
Code Class

Code Class
}
\examples{
cc <- teal.data:::CodeClass$new()
cc$set_code(c("foo <- function() {1}", "foo2 <- function() {2}"))
cc$get_code()
cc$get_code(deparse = FALSE)

cc$set_code(c("DF <- data.frame(x = 1:10)", "DF$y <- 1"), "DF")
cc$set_code("DF$a <- foo()", "DF")

# dependent dataset
cc$set_code(c("DF2 <- data.frame(x2 = 1:10)", "DF2$y2 <- DF$y"), "DF2", deps = "DF")

cc$set_code("baz <- function() {2}")
cc$set_code("DF2$a <- baz()", "DF2")

cc$get_code()
cc$get_code("DF")
cc$get_code("DF2")


x1 <- teal.data:::CodeClass$new()
x1$set_code("DF <- data.frame(x = 1:10)", "DF")
x1$get_code()

x2 <- teal.data:::CodeClass$new()
x2$set_code(c("DF2 <- data.frame(x2 = 1:10)", "DF2$x2 <- DF$x"), "DF2", deps = "DF")
x2$get_code()

x <- teal.data:::CodeClass$new()
x$append(x1)
x$append(x2)

x$get_code()
x$get_code("DF")
x$get_code("DF2")
x$get_code(c("DF", "DF2"))

x3 <- teal.data:::CodeClass$new()
x3$set_code("DF3 <- data.frame(x3 = 1:10) ", "DF3")
x3$get_code()

x$append(x3)
x$get_code("DF3")

# mutation simulation
x$set_code("DF3$x <- foo(DF$x)", "DF3", deps = "DF")
x$get_code("DF3")
}
\keyword{internal}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{code}}{(\code{list}) Derive the code of the dataset.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{CodeClass$new()}}
\item \href{#method-append}{\code{CodeClass$append()}}
\item \href{#method-set_code}{\code{CodeClass$set_code()}}
\item \href{#method-get_code}{\code{CodeClass$get_code()}}
\item \href{#method-eval}{\code{CodeClass$eval()}}
\item \href{#method-clone}{\code{CodeClass$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\code{CodeClass} constructor
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CodeClass$new(
  code = character(0),
  dataname = character(0),
  deps = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{(\code{character}) vector of code text to be set}

\item{\code{dataname}}{optional, (\code{character}) vector of datanames to assign code to. If empty then the code
is considered to be "global"}

\item{\code{deps}}{optional, (\code{character}) vector of datanames that given code depends on}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
object of class \code{CodeClass}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-append"></a>}}
\if{latex}{\out{\hypertarget{method-append}{}}}
\subsection{Method \code{append()}}{
Append \code{CodeClass} object to a given \code{CodeClass} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CodeClass$append(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{CodeClass}) object to be appended}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
changed \code{CodeClass} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_code"></a>}}
\if{latex}{\out{\hypertarget{method-set_code}{}}}
\subsection{Method \code{set_code()}}{
Set code in form of character
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CodeClass$set_code(code, dataname = character(0), deps = character(0))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{(\code{character}) vector of code text to be set}

\item{\code{dataname}}{optional, (\code{character}) vector of datanames to assign code to. If empty then the code
is considered to be "global"}

\item{\code{deps}}{optional, (\code{character}) vector of datanames that given code depends on}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
changed \code{CodeClass} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code"></a>}}
\if{latex}{\out{\hypertarget{method-get_code}{}}}
\subsection{Method \code{get_code()}}{
Get the code for a given data names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CodeClass$get_code(dataname = NULL, deparse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{optional, (\code{character}) vector of datanames for which the code is extracted.
If \code{NULL} then get the code for all data names}

\item{\code{deparse}}{optional, (\code{logical}) whether to return the deparsed form of a call}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character} or \code{list} of calls
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-eval"></a>}}
\if{latex}{\out{\hypertarget{method-eval}{}}}
\subsection{Method \code{eval()}}{
Evaluates internal code within given environment
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CodeClass$eval(envir = new.env(parent = parent.env(.GlobalEnv)))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{envir}}{(\code{environment}) environment in which code will be evaluated}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CodeClass$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
