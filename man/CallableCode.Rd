% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CallableCode.R
\name{CallableCode}
\alias{CallableCode}
\title{A \code{CallableCode} class of objects}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
Object that stores code to reproduce an object. It includes methods to
get or run the code and return the object.
}
\section{Super class}{
\code{\link[teal.data:Callable]{teal.data::Callable}} -> \code{CallableCode}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CallableCode-new}{\code{CallableCode$new()}}
\item \href{#method-CallableCode-get_call}{\code{CallableCode$get_call()}}
\item \href{#method-CallableCode-clone}{\code{CallableCode$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="Callable" data-id="assign_to_env"><a href='../../teal.data/html/Callable.html#method-Callable-assign_to_env'><code>teal.data::Callable$assign_to_env()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="Callable" data-id="get_error_message"><a href='../../teal.data/html/Callable.html#method-Callable-get_error_message'><code>teal.data::Callable$get_error_message()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="Callable" data-id="is_failed"><a href='../../teal.data/html/Callable.html#method-Callable-is_failed'><code>teal.data::Callable$is_failed()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.data" data-topic="Callable" data-id="run"><a href='../../teal.data/html/Callable.html#method-Callable-run'><code>teal.data::Callable$run()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableCode-new"></a>}}
\if{latex}{\out{\hypertarget{method-CallableCode-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{CallableCode} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableCode$new(code, env = new.env(parent = parent.env(globalenv())))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{(\code{character})\cr
a string containing R code to reproduce the desired object.}

\item{\code{env}}{(\code{environment})\cr
environment where function will be evaluated}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{CallableCode} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableCode-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-CallableCode-get_call}{}}}
\subsection{Method \code{get_call()}}{
Get sequence of calls from the code supplied to produce the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableCode$get_call(deparse = TRUE, args = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deparse}}{(\code{logical} value)\cr
whether to return a deparsed version of call}

\item{\code{args}}{(\code{NULL})\cr
available to be consistent with \code{CallableFunction} but are not used to
retrieve the call.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{list} of \code{calls} or \code{character} depending on \code{deparse} argument
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CallableCode-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CallableCode-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallableCode$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
