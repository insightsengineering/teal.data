% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/teal_data.R
\name{teal_data}
\alias{teal_data}
\title{Teal data}
\usage{
teal_data(..., join_keys = teal.data::join_keys(), code = "", check = FALSE)
}
\arguments{
\item{...}{(\code{TealDataConnector}, \code{TealDataset}, \code{TealDatasetConnector}, \code{any})\cr
\itemize{
\item When one of the \verb{Teal*} objects are provided, then function returns \code{TealData} object.
This way of specifying data is deprecated and will be removed in the next release.
\item From version 0.4.0, one can provide any object as a named argument and function will
return \code{teal_data} object. Objects provided in \code{...} will be stored in \code{teal_data} environment
under the same name as the argument name.
}}

\item{join_keys}{(\code{JoinKeys}) or a single (\code{JoinKeySet})\cr
(optional) object with dataset column relationships used for joining.
If empty then no joins between pairs of objects}

\item{code}{(\code{character}) code to reproduce the datasets.}

\item{check}{(\code{logical}) reproducibility check - whether to perform a check that the pre-processing
code included in the object definitions actually produces those objects.
If \code{check} is true and preprocessing code is empty an error will be thrown.}
}
\value{
(\code{TealData} or \code{teal_data}) object
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
Universal function to pass data to teal application
}
\examples{

teal_data(
  x1 = iris,
  x2 = mtcars,
  code = quote({
    x1 <- iris
    x2 <- mtcars
  })
)
}
