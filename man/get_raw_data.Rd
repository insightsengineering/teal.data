% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_raw_data.R
\name{get_raw_data}
\alias{get_raw_data}
\alias{get_raw_data.TealDataset}
\alias{get_raw_data.TealDatasetConnector}
\alias{get_raw_data.TealDataAbstract}
\title{Retrieve raw data}
\usage{
get_raw_data(x, dataname = NULL)

\method{get_raw_data}{TealDataset}(x, dataname = NULL)

\method{get_raw_data}{TealDatasetConnector}(x, dataname = NULL)

\method{get_raw_data}{TealDataAbstract}(x, dataname = NULL)
}
\arguments{
\item{x}{(\code{TealDataset}, \code{TealDatasetConnector}, \code{TealDataAbstract})\cr
object}

\item{dataname}{(\code{character})\cr
Name of dataset to return raw data for.}
}
\value{
\code{data.frame} with the raw data inserted into the R6 objects. In case of
\code{TealDataAbstract}, \code{list} of \code{data.frame} can be returned
if user doesn't specify \code{dataname} - (\code{get_raw_data} from all datasets).
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
}
\examples{

# TealDataset ---------
ADSL <- teal.data::example_cdisc_data("ADSL")

x <- dataset(dataname = "ADSL", x = ADSL)
get_raw_data(x)

# TealDatasetConnector ---------
library(magrittr)
pull_fun_adsl <- callable_function(teal.data::example_cdisc_data) \%>\%
  set_args(list(dataname = "ADSL"))
dc <- dataset_connector("ADSL", pull_fun_adsl)
load_dataset(dc)
get_raw_data(dc)

# TealData ----------------
adsl <- cdisc_dataset(
  dataname = "ADSL",
  x = teal.data::example_cdisc_data("ADSL"),
  code = "library(teal.data)\nADSL <- teal.data::example_cdisc_data(\"ADSL\")"
)

adtte <- cdisc_dataset(
  dataname = "ADTTE",
  x = teal.data::example_cdisc_data("ADTTE"),
  code = "library(teal.data)\nADTTE <- teal.data::example_cdisc_data(\"ADTTE\")"
)

rd <- teal.data:::TealData$new(adsl, adtte)
get_raw_data(rd)

# TealDataConnector --------
library(magrittr)

slice_cdisc_data <- function(dataname, n) {
  head(example_cdisc_data(dataname), n)
}

random_data_connector <- function(dataname) {
  fun_dataset_connector(
    dataname = dataname,
    fun = slice_cdisc_data,
    fun_args = list(dataname = dataname),
  )
}

open_fun <- callable_function(library)
open_fun$set_args(list(package = "teal.data"))

con <- data_connection(open_fun = open_fun)
con$set_open_server(
  function(id, connection) {
    moduleServer(
      id = id,
      module = function(input, output, session) {
        connection$open(try = TRUE)
        return(invisible(connection))
      }
    )
  }
)

rdc <- relational_data_connector(
  connection = con,
  connectors = list(random_data_connector("ADSL"), random_data_connector("ADLB"))
)

rdc$set_ui(
  function(id, connection, connectors) {
    ns <- NS(id)
    tagList(
      connection$get_open_ui(ns("open_connection")),
      numericInput(inputId = ns("n"), label = "Choose number of records", min = 0, value = 1),
      do.call(
        what = "tagList",
        args = lapply(
          connectors,
          function(connector) {
            div(
              connector$get_ui(
                id = ns(connector$get_dataname())
              ),
              br()
            )
          }
        )
      )
    )
  }
)

rdc$set_server(
  function(id, connection, connectors) {
    moduleServer(
      id = id,
      module = function(input, output, session) {
        # opens connection
        connection$get_open_server()(id = "open_connection", connection = connection)
        if (connection$is_opened()) {
          for (connector in connectors) {
            set_args(connector, args = list(n = input$n))
            # pull each dataset
            connector$get_server()(id = connector$get_dataname())
            if (connector$is_failed()) {
              break
            }
          }
        }
      }
    )
  }
)

\dontrun{
load_datasets(rdc)
get_raw_data(rdc)
}

# TealData (with connectors) --------
drc <- cdisc_data(rdc)
\dontrun{
get_raw_data(drc)
}
}
