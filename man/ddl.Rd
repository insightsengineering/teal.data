% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ddl.R
\name{ddl}
\alias{ddl}
\title{DDL object}
\usage{
ddl(
  code,
  postprocess_fun,
  offline_args = username_password_args(),
  ui = username_password_ui,
  server = username_password_server
)
}
\arguments{
\item{code}{(\code{character})\cr
Code to be evaluated and returned to the \code{postprocess_fun}}

\item{postprocess_fun}{(\verb{function(env, code)})\cr
Function to be run after code is run. This function suppose
has two arguments:
\itemize{
\item \code{env} (\code{environment}) returned as a result of the code evaluation
\item code (\code{character}) \code{code} provided with resolved (substituted) args.
}}

\item{offline_args}{(\code{list} named)\cr
arguments to be substituted in the \code{code}. These
argument are going to replace arguments set through
\code{ui} and \code{server}. Example use case is when app user
is asked to input a password and we'd like to skip this
input in the reproducible code. Typically users password
is substituted with \code{askpass::askpass()} call, so the
returned code is still executable but secure.}

\item{ui}{(\code{shiny.tag})\cr
\code{shiny} ui module containing inputs which \code{id} correspond to the
args in the \code{code}.}

\item{server}{(\verb{function(id, offline_args, code, postprocess_fun)})\cr
\code{shiny} server module returning data. This server suppose to execute
DDL code and return a reactive data containing necessary data.
Package provides universal \code{username_password_server} which
runs \link{ddl_run} function, which returns \code{tdata} object.
Details in the the example}
}
\description{
Object to execute custom DDL code in the shiny session
}
\examples{

x <- ddl(
  # code to be run when app user presses submit
  code = '
  ADSL <- scda::synthetic_cdisc_data({ version })$adsl
  ADTTE <- scda::synthetic_cdisc_data({ version })$adtte
  ADRS <- scda::synthetic_cdisc_data({ version })$adrs
  ',

  # ui they wish to use for the loading data
  ui = function(id) {
    ns <- NS(id)
    tagList(
      textInput(ns("version"), label = "SCDA version", value = "latest"),
      actionButton(ns("submit"), label = "Submit")
    )
  },

  postprocess_fun = function(env_list, code) {
    cdisc_data(env = env_list, code = code)
  }
)
app <- shinyApp(
  ui = fluidPage(
    fluidRow(
      column(3, h1("User Inputs"), x$ui(id = "custom_ui")),
      column(9, h1("R code"), verbatimTextOutput("output"))
    )
  ),
  server = function(input, output, session) {
    loaded_data <- x$server(id = "custom_ui", x$offline_args, x$code, x$postprocess_fun)
    output$output <- renderPrint({
      req(loaded_data())
      loaded_data()
    })
  }
)

shiny::runApp(app)

}
